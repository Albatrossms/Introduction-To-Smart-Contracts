pragma solidity ^0.5.9;

contract C {
    uint private data;
    function f(uint a) public pure returns(uint){
        return a + 1;
    }
    
    function setData(uint a) public {
        data = a;
    }
    
    function getData() public view returns(uint){
        return data;
    }
    
    function compute(uint a, uint b) external pure returns(uint){
        return  a + b;
    }
    
    function mul(uint a, uint b) external pure returns(uint){
        return  a * b;
    }
    
    function test() public view returns(uint add, uint prod) {
         add = this.compute(1,2);
         prod = this.mul(3,3);
    }
}

// contract D {
//     function readData() public {
//         C c = new C();
//         uint local = c.f(4);
//         c.setData(1);
//         local = c.getData();
//         local = c.compute(1,2);
//     }
// }

// contract E is C{
//     function g() public {
//         C c = new C();
//         uint val = compute(3,5);
//     }
// }